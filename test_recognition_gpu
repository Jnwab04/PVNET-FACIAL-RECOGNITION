import face_recognition
import cv2
import numpy as np
import pickle
import pyttsx3
import time
import threading
from concurrent.futures import ThreadPoolExecutor

# Adjust frame processing frequency
frame_skip = 2  # Process every third frame
frame_count = 0

# Adjust the scaling factor for faster processing
scaling_frame = 1  # Adjust the scaling to a reasonable size for better performance
going_back_frame = 1 / scaling_frame

# Load the known faces and encodings
with open("encodings.pkl", "rb") as f:
    known_face_encodings, known_face_names, _ = pickle.load(f)

# Initialize TTS engine
engine = pyttsx3.init()

# Track the last time each person was recognized
last_spoken_time = {}
face_detection_time = {}

# Time limits
SPEAK_INTERVAL = 3600  # 1 hour
DETECTION_TIME_REQUIRED = 0.5  # Half-second

# Initialize some variables
face_locations = []
face_encodings = []
face_names = []

# Get a reference to the webcam
video_capture = cv2.VideoCapture(0)
video_capture.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
video_capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

def speak_name(name):
    """Threaded function to speak a person's name using TTS."""
    engine.say(f"Hello {name}")
    engine.runAndWait()

def detect_faces(frame):
    """Detect faces using face_recognition."""
    return face_recognition.face_locations(frame, model="hog")

def encode_faces(frame, face_locations):
    """Encode faces using face_recognition."""
    return face_recognition.face_encodings(frame, face_locations)

# Thread pool executor with 2 workers for detection and encoding
with ThreadPoolExecutor(max_workers=2) as executor:
    while True:
        ret, frame = video_capture.read()

        if frame_count % frame_skip == 0:
            start_time = time.time()

            # Move the frame to the GPU
            gpu_frame = cv2.cuda_GpuMat()
            gpu_frame.upload(frame)

            # Resize frame on the GPU for faster processing
            small_gpu_frame = cv2.cuda.resize(gpu_frame, (0, 0), fx=scaling_frame, fy=scaling_frame)

            # Convert BGR to RGB on the GPU
            rgb_gpu_frame = cv2.cuda.cvtColor(small_gpu_frame, cv2.COLOR_BGR2RGB)

            # Download the frame back to the CPU to use with face_recognition (CPU-based library)
            rgb_small_frame = rgb_gpu_frame.download()

            # Submit the face detection task to one thread
            detection_future = executor.submit(detect_faces, rgb_small_frame)

            # Get the face locations from the future
            face_locations = detection_future.result()

            if face_locations:
                # Submit the face encoding task to another thread
                encoding_future = executor.submit(encode_faces, rgb_small_frame, face_locations)

                # Get the face encodings from the future
                face_encodings = encoding_future.result()

                face_names = []
                for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
                    face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
                    best_match_index = np.argmin(face_distances)
                    matches = face_distances <= .4

                    name = "Unknown"
                    if matches[best_match_index]:
                        name = known_face_names[best_match_index]

                        current_time = time.time()
                        if name not in face_detection_time:
                            face_detection_time[name] = current_time

                        if current_time - face_detection_time[name] >= DETECTION_TIME_REQUIRED:
                            if name not in last_spoken_time or (current_time - last_spoken_time[name]) > SPEAK_INTERVAL:
                                threading.Thread(target=speak_name, args=(name,)).start()
                                last_spoken_time[name] = current_time

                    face_names.append(name)

                for name in list(face_detection_time.keys()):
                    if name not in face_names:
                        del face_detection_time[name]

            end_time = time.time()
            gpu_time = end_time - start_time
            print(f"GPU time: {gpu_time:.4f} seconds")

        frame_count += 1

        # Display the results
        for (top, right, bottom, left), name in zip(face_locations, face_names):
            top = int(top * going_back_frame)
            right = int(right * going_back_frame)
            bottom = int(bottom * going_back_frame)
            left = int(left * going_back_frame)

            # Calculate the bounding box height and adjust font size
            box_height = bottom - top
            font_scale = box_height / 150  # Adjust this value to get the desired scaling effect

            cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)
            cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 0, 255), cv2.FILLED)

            font = cv2.FONT_HERSHEY_DUPLEX
            cv2.putText(frame, name, (left + 6, bottom - 6), font, font_scale, (255, 255, 255), 1)

        cv2.imshow('Video', frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

# Release video capture and close windows
video_capture.release()
cv2.destroyAllWindows()
